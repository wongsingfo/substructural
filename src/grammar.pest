// pest provides a solution using the special rule WHITESPACE. If defined, it
// will be implicitly run, as many times as possible, at every tilde ~ and
// between every repetition (for example, * and +). We mark the WHITESPACE rule
// silent with a leading low line (underscore) _{ ... }.
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

alpha = _{ "_" | ASCII_ALPHA }
digit = _{ ASCII_DIGIT }
identifier_start    = _{ alpha }
identifier_continue = _{ alpha | digit }

// Term

variable = @{ identifier_start ~ identifier_continue* }

boolean = @{ ("true" | "false") ~ !identifier_continue }

kw_if = @{ "if" ~ !identifier_continue }
conditional = { kw_if ~ term ~ "{" ~ term ~ "}" ~ "else" ~ "{" ~ term ~ "}" }

abstraction = { "|" ~ variable ~ (":" ~ typing)? ~ "|" ~ term }

application = { "(" ~ term ~ ")" }

literal = { boolean }

bracket = { "(" ~ term ~ ")" }

term = _{ ( abstraction | literal | conditional | variable | bracket ) ~ application* }

// Typing

kw_Bool = @{ "Bool" ~ !identifier_continue }
fntype = { "(" ~ typing ~ ")" ~ "->" ~ typing }
pretype = { kw_Bool | ( "fn" ~ fntype ) }

kw_un = @{ "un" ~ !identifier_continue }
kw_lin = @{ "lin" ~ !identifier_continue }
qualifier = { kw_un | kw_lin }

typing = { qualifier? ~ pretype }

// SOI and EOI are two special rules that match, respectively, the start of
// inputand the end of input.
program = _{ SOI ~ term ~ EOI }
